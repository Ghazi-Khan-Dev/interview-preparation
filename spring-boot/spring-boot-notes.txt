Topics -

  1. W's of Spring
    1.1 What is Spring Framework
    1.2 Advantages of Spring
    1.3 Life Cycle of Bean
    1.4 Dependency Injection
    1.5 Spring AOP

  2. All of Spring Boot
    2.1 What is Spring Framework
    2.2 Features & Advantages
    2.3 Building REST API's
    2.4 Unit Testing (Junit, Mockito)

  3. REST API's

  4. Junit & Mockito

  5. Spring Data
    5.1 What is JPA
    5.2 Using Spring Data JPA
    5.3 Hibernate
    5.4 Entity Relationships

  6. Spring Security
    6.1 Implementing Spring Security
    6.2 OAuth 2.0 & OpenId Connect
    6.3 Complete Login Flow

-----------------------------------------------------------------------------------------------------

Sfotware requirements -

  Java 11
  Maven 3+
  IntelliJ IDE Or any Other IDE
  MySQL server & Workbench

-----------------------------------------------------------------------------------------------------


There are 3 ways to configure the beans in Spring-Boot

  1. XML based configuration
  2. Annotation based configuration
  3. Java based configuration

    - To access the beans using ApplicationContext we need to add the following dependency in POM file.
      spring-context

    - There are 2 context available
      1. BeanContext
      2. ApplicationContext

    - ApplicationContext extends the BeanContext & it provides more functionalities.


  1. XML based configuration -

    - We need to create the object of ApplicationContext using ClassPathXmlApplicationContext() class.
    - We have to provide the name of xml file (which contains bean defenation) to ClassPathXmlApplicationContext class.
    - Inside xml file we need to provide the namespace for the spring version we are using (spring-context)
    - We can add the beans inside XMl file (setter base injection), as follows

        <bean id="teacher" class="org.example.Teacher">
          <property name="name" value="Ghazi"></property>
          <property name="Address" ref="address">
        </bean>

    - We can also use constructor base injection, as follows

        <bean id="teacher" class="org.example.Teacher">
          <constructor-arg value="Ghazi"></constructor-arg>
        </bean>


  2. Annotation based configuration -

    - For annotaion base configuration we need to add @Component annotaion on the top of class, which we want
      to access as a bean.


  3. Java based configuration -

    - We need to create bean-configuration class and annotate it using @Configuration annotaion.
    - We can create the bean inside the bean-config file OR we can use the @ComponentScan annotaion
      along with @Configuration annotaion so that spring automatically create the bean.

-----------------------------------------------------------------------------------------------------

  Scope of beans -

    1. Singleton  (Default)
    2. Prototype
    3. Request
    4. Session
    5. GlobalSession

    - By default scope of bean is Singleton.
    - We can update the scope of bean using @Scope annotaion
    - e.g

        @Scope(scopeName="prototype")

-----------------------------------------------------------------------------------------------------

  Life Cycle of Bean -

    - There are 7 different steps in life cycle of bean -

        1. Defenation of Bean
        2. Instantiation/Creation of bean process
        3. Populate the property (set the default values, and add the Id, if provided to the Bean)
        4. Post initialization
        5. All the dependency will be injected and bean will be available in container
        6. Pre destroy
        7. Bean destroy

    - There are couple of interface provided by spring to modify the property during bean life cycle,
      BeanNameAware is one of the interface.
    - There are few annotaions in which we can perform the post construction & pre destroy operations, the annotaions are as follows -

        @PostConstruct (Generally use to pass the file path or to create new threads)
        @PreDestroy (Generally use to close the DB connection, or close file or kill the threads)

    - To use the above annotaions, we need to add the the following dependency

        javax.annotation-api


-----------------------------------------------------------------------------------------------------

  Aspect oriented programming (AOP) -

    - AOP is a methodology, by using it we can create the application.
    - It helps to seperate out the cross-cutting concerns, from the main bussiness.
    - Each cross-cutting concerns is know as aspect, for each cross-cutting concerns we have to create seperate aspect.
    - The method define inside the aspect is called as point-cut.
    - The methods from it should get called is called join-point-cut.
    - For aspect we need to add the follwing dependencies -
      - aspectjrt
      - aspectjweaver

    - We have to do the following things to design the aspect -

      - Make a class aspect by adding the follwing annotaion
        @Aspect       (will mark the class as aspect)
        @Component    (will mark the class as bean)

      - Use the follwing annotaion to mark the method as point-cut (available inside aspect)
        @Before("execution(* org.demo.ShoppingCart.checkOut())")

      - Enable the aspect by adding the follwong annotaion to Config class
        @EnableAspectJAutoProxy

      - We can create the point-cut and use them inside the @Before, @After annotaions,
        e.g -

          @Pointcut("within(org..*)")
          public void authenticatingPointCut() {}

          @Pointcut("within(org..*)")
          public void authorizationPointCut(){}

          @Before("authenticatingPointCut() && authorizationPointCut()")
          public void authenticate() {
              System.out.println("Authenticating the request ...");
          }

      - We can reveive the parameter inside the point-cut methods as well,
        e.g -
          @Before("execution(* org.demo.ShoppingCart.checkOut(..))")
          public void BeforeLogger(JoinPoint joinPoint) {
              Object[] args =  joinPoint.getArgs();
              String status = args[0].toString();
              System.out.println("args - " + status);
              System.out.println("Before logger called");
          }

      - We can also use @AfterReturning annotaion,
        e.g -
          @Pointcut("execution(* org.demo.ShoppingCart.quantity(..))")
          public void afterReturningPointCut(){}

          @AfterReturning(pointcut = "afterReturningPointCut()", returning = "retVal")
          public void afterReturning(int retVal) {
              System.out.println("After returning " + retVal);
          }