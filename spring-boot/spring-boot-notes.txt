Topics -

  1. W's of Spring
    1.1 What is Spring Framework
    1.2 Advantages of Spring
    1.3 Life Cycle of Bean
    1.4 Dependency Injection
    1.5 Spring AOP

  2. All of Spring Boot
    2.1 What is Spring Framework
    2.2 Features & Advantages
    2.3 Building REST API's
    2.4 Unit Testing (Junit, Mockito)

  3. REST API's

  4. Junit & Mockito

  5. Spring Data
    5.1 What is JPA
    5.2 Using Spring Data JPA
    5.3 Hibernate
    5.4 Entity Relationships

  6. Spring Security
    6.1 Implementing Spring Security
    6.2 OAuth 2.0 & OpenId Connect
    6.3 Complete Login Flow

-----------------------------------------------------------------------------------------------------

Sfotware requirements -

  Java 11
  Maven 3+
  IntelliJ IDE Or any Other IDE
  MySQL server & Workbench

-----------------------------------------------------------------------------------------------------


There are 3 ways to configure the beans in Spring-Boot

  1. XML based configuration
  2. Annotation based configuration
  3. Java based configuration

    - To access the beans using ApplicationContext we need to add the following dependency in POM file.
      spring-context

    - There are 2 context available
      1. BeanContext
      2. ApplicationContext

    - ApplicationContext extends the BeanContext & it provides more functionalities.


  1. XML based configuration -

    - We need to create the object of ApplicationContext using ClassPathXmlApplicationContext() class.
    - We have to provide the name of xml file (which contains bean defenation) to ClassPathXmlApplicationContext class.
    - Inside xml file we need to provide the namespace for the spring version we are using (spring-context)
    - We can add the beans inside XMl file (setter base injection), as follows

        <bean id="teacher" class="org.example.Teacher">
          <property name="name" value="Ghazi"></property>
          <property name="Address" ref="address">
        </bean>

    - We can also use constructor base injection, as follows

        <bean id="teacher" class="org.example.Teacher">
          <constructor-arg value="Ghazi"></constructor-arg>
        </bean>


  2. Annotation based configuration -

    - For annotaion base configuration we need to add @Component annotaion on the top of class, which we want
      to access as a bean.


3. Java based configuration -

    - We need to create bean-configuration class and annotate it using @Configuration annotaion.
    - We can create the bean inside the bean-config file OR we can use the @ComponentScan annotaion
      along with @Configuration annotaion so that spring automatically create the bean.